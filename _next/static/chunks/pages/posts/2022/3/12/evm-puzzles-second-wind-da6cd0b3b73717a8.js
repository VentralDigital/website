(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[203],{67609:function(e,s,l){(window.__NEXT_P=window.__NEXT_P||[]).push(["/posts/2022/3/12/evm-puzzles-second-wind",function(){return l(6058)}])},6058:function(e,s,l){"use strict";l.r(s),l.d(s,{__toc:function(){return c}});var n=l(35250),a=l(47147),i=l(77298),t=l(18363),r=l(13423);let c=[{depth:2,value:"Puzzle #1",id:"puzzle-1"},{depth:2,value:"Puzzle #2",id:"puzzle-2"},{depth:2,value:"Puzzle #3",id:"puzzle-3"},{depth:2,value:"Puzzle #4",id:"puzzle-4"},{depth:2,value:"Puzzle #5",id:"puzzle-5"},{depth:2,value:"Puzzle #6",id:"puzzle-6"},{depth:2,value:"Puzzle #7",id:"puzzle-7"},{depth:2,value:"Puzzle #8",id:"puzzle-8"},{depth:2,value:"Puzzle #9",id:"puzzle-9"},{depth:2,value:"Puzzle #10",id:"puzzle-10"},{depth:2,value:"Conclusion",id:"conclusion"}];function _createMdxContent(e){let s=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code",span:"span",em:"em",ol:"ol",li:"li",hr:"hr"},(0,i.a)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{children:"EVM Puzzles – Second Wind"}),"\n",(0,n.jsxs)("p",{className:"text-xs text-right",children:["March 12, 2022 by ",(0,n.jsx)(s.a,{href:"/about#patrickd",children:"patrickd"})]}),"\n",(0,n.jsxs)(s.p,{children:["Just shortly after publishing my ",(0,n.jsx)(s.a,{href:"https://ventral.digital/posts/2022/2/24/learning-ethereum-virtual-machine-opcodes-with-evm-puzzles",children:"write-up on Franco Victorio's EVM Puzzles"})," he finished to ",(0,n.jsx)(s.a,{href:"https://twitter.com/fvictorio_nan/status/1500312282567434242",children:'"Re-write the whole thing"'}),"!"]}),"\n",(0,n.jsx)(s.p,{children:"It's now interactive, meaning you no longer have to edit the puzzle files to solve them but instead just type your solution directly into the console. And instead of having to look at the bytecode embedded in JavaScript, it now too is nicely displayed within the console with colors and addresses. But most importantly, the puzzles themselves have changed and there's now 10 of them!"}),"\n",(0,n.jsxs)(s.p,{children:["Note that I'll assume you've read my ",(0,n.jsx)(s.a,{href:"/posts/2022/2/24/learning-ethereum-virtual-machine-opcodes-with-evm-puzzles/",children:"previous blog post"})," already, or that you've solved the old version, since I'll not explain the opcodes that were already discussed there in detail again."]}),"\n",(0,n.jsx)(s.h2,{id:"puzzle-1",children:"Puzzle #1"}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"00      34      CALLVALUE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"01      56      JUMP"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"02      FD      REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"03      FD      REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"04      FD      REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"05      FD      REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"06      FD      REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"07      FD      REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"08      5B      JUMPDEST"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"09      00      STOP"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"? Enter the value to send:"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["The new first puzzle is very similar to the old one, just this time the ",(0,n.jsx)(s.code,{children:"JUMP"}),"'s destination value is not based on ",(0,n.jsx)(s.code,{children:"CALLDATASIZE"})," (the length of data sent) but instead taken from the ",(0,n.jsx)(s.code,{children:"CALLVALUE"}),". Here we no longer have to do any counting in order to determine where we want to jump to, we can just directly read the address of the ",(0,n.jsx)(s.code,{children:"JUMPDEST"})," opcode which is 08."]}),"\n",(0,n.jsxs)(s.p,{children:["So let's send a transaction value of 8 as solution, which will cause a jump to the only available jump-destination and then ends the execution without error. It doesn't really matter that ",(0,n.jsx)(s.code,{children:"STOP"})," is the next instruction after ",(0,n.jsx)(s.code,{children:"JUMPDEST"})," since that's implicitly the case at the end of an EVM program anyway."]}),"\n",(0,n.jsx)(s.h2,{id:"puzzle-2",children:"Puzzle #2"}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"00      34      CALLVALUE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"01      38      CODESIZE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"02      03      SUB"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"03      56      JUMP"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"04      FD      REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"05      FD      REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"06      5B      JUMPDEST"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"07      00      STOP"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"08      FD      REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"09      FD      REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"? Enter the value to send:"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["Once more, very similar to the previous version with the biggest difference in it using the value instead of calldata-size again. The ",(0,n.jsx)(s.code,{children:"CODESIZE"})," is 10 (last address + 1) and the only ",(0,n.jsx)(s.code,{children:"JUMPDEST"})," is located at offset 06."]}),"\n",(0,n.jsxs)(s.p,{children:["We need to calculate ",(0,n.jsx)(s.code,{children:"CODESIZE"})," minus the value we send, and have the result be 6. Therefore, sending a 4 is the solution."]}),"\n",(0,n.jsxs)(s.p,{children:["This time it was essential that ",(0,n.jsx)(s.code,{children:"STOP"})," came after ",(0,n.jsx)(s.code,{children:"JUMPDEST"})," since otherwise, the instruction pointer would have run into a ",(0,n.jsx)(s.code,{children:"REVERT"})," causing a failure of execution."]}),"\n",(0,n.jsx)(s.h2,{id:"puzzle-3",children:"Puzzle #3"}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"00      36      CALLDATASIZE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"01      56      JUMP"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"02      FD      REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"03      FD      REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"04      5B      JUMPDEST"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"05      00      STOP"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"? Enter the calldata:"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["It appears ",(0,n.jsx)(s.code,{children:"CALLDATASIZE"}),' is now being introduced as a new "mechanic". Again, we can see that the only valid jump destination is located at 04, which means we\'ll have to send any 4 bytes (eg. ',(0,n.jsx)(s.code,{children:"00000000"}),") as transaction calldata in order to reach the end."]}),"\n",(0,n.jsx)(s.h2,{id:"puzzle-4",children:"Puzzle #4"}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"00      34      CALLVALUE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"01      38      CODESIZE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"02      18      XOR"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"03      56      JUMP"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"04      FD      REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"05      FD      REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"06      FD      REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"07      FD      REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"08      FD      REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"09      FD      REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0A      5B      JUMPDEST"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0B      00      STOP"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"? Enter the value to send:"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["This code will calculate ",(0,n.jsx)(s.code,{children:"CODESIZE ^ CALLVALUE"})," and use the result as jump target with the only valid jump-destination being at 0A (or 10 in decimal). With the code size being 12, what we have to solve here is ",(0,n.jsx)(s.code,{children:"12 ^ CALLVALUE = 10"})," or ",(0,n.jsx)(s.code,{children:"12 ^ 10 = CALLVALUE"}),":"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0  1  1  0  0 |     12"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0  1  0  1  0 | XOR 10"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"______________|_______"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0  0  1  1  0 |    = 6"})})]})}),"\n",(0,n.jsx)(s.p,{children:"The solution is 6!"}),"\n",(0,n.jsx)(s.h2,{id:"puzzle-5",children:"Puzzle #5"}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"00      34          CALLVALUE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"01      80          DUP1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"02      02          MUL"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"03      610100      PUSH2 0100"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"06      14          EQ"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"07      600C        PUSH1 0C"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"09      57          JUMPI"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0A      FD          REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0B      FD          REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0C      5B          JUMPDEST"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0D      00          STOP"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0E      FD          REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0F      FD          REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"? Enter the value to send:"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["The first 3 lines do ",(0,n.jsx)(s.code,{children:"CALLDATA * CALLDATA"})," and later that result is compared to ",(0,n.jsx)(s.code,{children:"0100"}),". Only if that yields 1 (true) the ",(0,n.jsx)(s.code,{children:"JUMPI"})," will jump to the ",(0,n.jsx)(s.code,{children:"JUMPDEST"})," at offset 0C."]}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"0100"})," bytes are 256 in decimal and its square root is 16, which is the solution."]}),"\n",(0,n.jsx)(s.h2,{id:"puzzle-6",children:"Puzzle #6"}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"00      6000      PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"02      35        CALLDATALOAD"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"03      56        JUMP"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"04      FD        REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"05      FD        REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"06      FD        REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"07      FD        REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"08      FD        REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"09      FD        REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0A      5B        JUMPDEST"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0B      00        STOP"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"? Enter the calldata:"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["Here the calldata itself is actually being pushed on the stack and used as jump-destination offset. Just like in the old Puzzle #3, we can't simply send the offset ",(0,n.jsx)(s.code,{children:"0a"})," as calldata since it would be padded by 31 zero-values and become a much larger number."]}),"\n",(0,n.jsxs)(s.p,{children:["To prevent that, we again have to send 32 bytes: ",(0,n.jsx)(s.code,{children:"0x000000000000000000000000000000000000000000000000000000000000000a"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"puzzle-7",children:"Puzzle #7"}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"00      36        CALLDATASIZE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"01      6000      PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"03      80        DUP1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"04      37        CALLDATACOPY"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"05      36        CALLDATASIZE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"06      6000      PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"08      6000      PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0A      F0        CREATE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0B      3B        EXTCODESIZE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0C      6001      PUSH1 01"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0E      14        EQ"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0F      6013      PUSH1 13"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"11      57        JUMPI"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"12      FD        REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"13      5B        JUMPDEST"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"14      00        STOP"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"? Enter the calldata:"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["Things get a lot more interesting now, with the introduction of the ",(0,n.jsx)(s.code,{children:"CREATE"})," opcode that deploys a new contract. Immediately after the contract was created, it fetches the size of its bytecode using ",(0,n.jsx)(s.code,{children:"EXTCODESIZE"})," and compares it to 1. Therefore only if the newly deployed contract has a code size of 1 it will make the jump and stop without reverting."]}),"\n",(0,n.jsxs)(s.p,{children:["A ",(0,n.jsx)(s.code,{children:"CREATE"})," consumes 3 items from the stack: A ",(0,n.jsx)(s.em,{children:"value"})," of wei to transfer, an ",(0,n.jsx)(s.em,{children:"offset"})," of where the new contract's bytecode is located in the current contract's memory and the ",(0,n.jsx)(s.em,{children:"length"})," of said bytecode. So far the puzzles never touched memory, but this changes with ",(0,n.jsx)(s.code,{children:"CALLDATACOPY"})," which also takes its 3 parameters from the stack: The memory ",(0,n.jsx)(s.em,{children:"destination"})," offset to copy bytes from calldata to, starting at the specified ",(0,n.jsx)(s.em,{children:"offset"})," and again the final item is the ",(0,n.jsx)(s.em,{children:"length"}),"."]}),"\n",(0,n.jsx)(s.p,{children:"Let's look at how the stack changes instruction by instruction:"}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"00      36        CALLDATASIZE    [CALLDATASIZE]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"01      6000      PUSH1 00        [00, CALLDATASIZE]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"03      80        DUP1            [00, 00, CALLDATASIZE] (memoryOffset, calldataOffset, length)"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"04      37        CALLDATACOPY    []"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["The effect so far is simply that all of the calldata was copied into memory - both calldata and memory have exactly the same contents now. After this, the ",(0,n.jsx)(s.code,{children:"CREATE"})," is called similarly, telling it to create a contract with the calldata as bytecode which it can copy from memory:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"05      36        CALLDATASIZE    [CALLDATASIZE]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"06      6000      PUSH1 00        [00, CALLDATASIZE]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"08      6000      PUSH1 00        [00, 00, CALLDATASIZE] (weiValue, memoryOffset, length)"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0A      F0        CREATE          [ADDRESS]"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["As hinted before, the address returned by ",(0,n.jsx)(s.code,{children:"CREATE"})," is then consumed by ",(0,n.jsx)(s.code,{children:"EXTCODESIZE"}),":"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0A      F0        CREATE          [ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0B      3B        EXTCODESIZE     [EXTCODESIZE]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0C      6001      PUSH1 01        [01, EXTCODESIZE]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0E      14        EQ              [(EXTCODESIZE == 1)]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0F      6013      PUSH1 13        [13, (EXTCODESIZE == 1)]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"11      57        JUMPI           []"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["At this point, the obvious solution would appear to be sending a single byte, which is then deployed as a new contract's bytecode. But the description of the ",(0,n.jsx)(s.code,{children:"CREATE"})," operation is misleading because what it expects to find in the memory location you point to is not the runtime bytecode to deploy, but the construction bytecode!"]}),"\n",(0,n.jsxs)(s.p,{children:["During all of these puzzles we have been looking at the runtime bytecode, so it is easy to forget that every contract is first initialized by a separate piece of code. If you're familiar with Solidity: it's basically the code that you'd put into the constructor. OpenZeppelin has a great blog post about ",(0,n.jsx)(s.a,{href:"https://blog.openzeppelin.com/deconstructing-a-solidity-contract-part-ii-creation-vs-runtime-6b9d60ecb44c/",children:"Deconstructing a Solidity Contract"}),", explaining the difference and what is really going on under the hood."]}),"\n",(0,n.jsxs)(s.p,{children:["What this init bytecode needs to do in short, is returning the actual runtime bytecode that should be deployed as a new contract, and to do that it has to use the ",(0,n.jsx)(s.code,{children:"RETURN"})," opcode. Return takes ",(0,n.jsx)(s.em,{children:"offset"})," and ",(0,n.jsx)(s.em,{children:"size"})," parameters from stack which is a location within memory that should be copied."]}),"\n",(0,n.jsx)(s.p,{children:"To solve this puzzle we have to return a single byte as runtime bytecode within the construction bytecode. Since we don't care what this byte is and because memory is zero-initialized we don't have to actually write any code to memory before returning. We can just tell it to return 1 byte at any offset:"}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"00      6001      PUSH1 01        [01]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"01      6000      PUSH1 00        [00, 01] (offset, size)"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"02      F3        RETURN          []"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["Since this is really short we don't need an assembler, we can just concatenate the opcodes and end up with ",(0,n.jsx)(s.code,{children:"0x60016000F3"})," as the solution."]}),"\n",(0,n.jsx)(s.h2,{id:"puzzle-8",children:"Puzzle #8"}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"00      36        CALLDATASIZE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"01      6000      PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"03      80        DUP1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"04      37        CALLDATACOPY"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"05      36        CALLDATASIZE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"06      6000      PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"08      6000      PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0A      F0        CREATE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0B      6000      PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0D      80        DUP1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0E      80        DUP1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0F      80        DUP1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"10      80        DUP1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"11      94        SWAP5"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"12      5A        GAS"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"13      F1        CALL"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"14      6000      PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"16      14        EQ"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"17      601B      PUSH1 1B"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"19      57        JUMPI"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"1A      FD        REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"1B      5B        JUMPDEST"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"1C      00        STOP"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"? Enter the calldata:"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["The beginning of the puzzle is exactly the same as in the previous one: All calldata is copied into memory and is then used as construction bytecode by ",(0,n.jsx)(s.code,{children:"CREATE"}),"."]}),"\n",(0,n.jsx)(s.p,{children:"Things get interesting afterwards:"}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0A      F0        CREATE          [ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0B      6000      PUSH1 00        [00, ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0D      80        DUP1            [00, 00, ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0E      80        DUP1            [00, 00, 00, ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0F      80        DUP1            [00, 00, 00, 00, ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"10      80        DUP1            [00, 00, 00, 00, 00, ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"11      94        SWAP5           [ADDRESS, 00, 00, 00, 00, 00]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"12      5A        GAS             [GAS, ADDRESS, 00, 00, 00, 00, 00]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"13      F1        CALL            [SUCCESS]"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["While it looks awfully complicated, this basically just prepares the stack for executing the ",(0,n.jsx)(s.code,{children:"CALL"})," opcode, which as the name suggests, calls into the bytecode of another contract."]}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsxs)(s.li,{children:["The amount of gas that should be made available for the execution of the contract being called. Here it's the result of the ",(0,n.jsx)(s.code,{children:"GAS"})," opcode that returns the overall amount of gas still available."]}),"\n",(0,n.jsxs)(s.li,{children:["The target address of the account to call into. Here it's the address that was returned by ",(0,n.jsx)(s.code,{children:"CREATE"}),", meaning the puzzle will be calling into the contract deployed using our calldata."]}),"\n",(0,n.jsx)(s.li,{children:"The amount of Wei to send as value. Here no ether (00) is sent during the call."}),"\n",(0,n.jsx)(s.li,{children:"The memory offset where the arguments passed during the call are stored."}),"\n",(0,n.jsx)(s.li,{children:"The size of the argument data to pass from memory. Here it's 00 meaning no argument data is passed and the memory offset (00) is also irrelevant."}),"\n",(0,n.jsx)(s.li,{children:"The memory offset where the returned data should be stored to."}),"\n",(0,n.jsx)(s.li,{children:"The size of the returned data that should be copied into memory. Here it's 00 meaning none of the returned data (if there were any) should be copied into memory, also making the memory destination offset (00) irrelevant."}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:['In summary, we\'re calling into the contract that was just deployed using the sent calldata. For this puzzle to succeed we need the "success" return value of the ',(0,n.jsx)(s.code,{children:"CALL"})," opcode to be EQual to 00. That means that the call into the contract must fail, we need it to ",(0,n.jsx)(s.code,{children:"REVERT"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["The solution is similar to the previous one in that we again have to create construction bytecode that deploys a contract with a single byte, but this time the byte must be 0xFD, the ",(0,n.jsx)(s.code,{children:"REVERT"})," opcode:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"00      60FD      PUSH1 FD        [FD]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"01      6000      PUSH1 00        [00, FD] (offset, value)"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"02      53        MSTORE8         [] // Wrote REVERT to memory"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"03      6001      PUSH1 01        [01]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"04      6000      PUSH1 00        [00, 01] (offset, size)"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"05      F3        RETURN          [] // Returns REVERT from memory"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["Using the ",(0,n.jsx)(s.code,{children:"MSTORE8"})," opcode we can write a single byte to memory. Using that, the construction bytecode we have to send as calldata is ",(0,n.jsx)(s.code,{children:"0x60FD60005360016000F3"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"puzzle-9",children:"Puzzle #9"}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"00      36        CALLDATASIZE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"01      6003      PUSH1 03"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"03      10        LT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"04      6009      PUSH1 09"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"06      57        JUMPI"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"07      FD        REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"08      FD        REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"09      5B        JUMPDEST"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0A      34        CALLVALUE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0B      36        CALLDATASIZE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0C      02        MUL"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0D      6008      PUSH1 08"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0F      14        EQ"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"10      6014      PUSH1 14"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"12      57        JUMPI"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"13      FD        REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"14      5B        JUMPDEST"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"15      00        STOP"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"? Enter the value to send:"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"? Enter the calldata:"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["See ",(0,n.jsx)(s.a,{href:"/posts/2022/2/24/learning-ethereum-virtual-machine-opcodes-with-evm-puzzles",children:"Puzzle #7 of the previous version"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"puzzle-10",children:"Puzzle #10"}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"00      38          CODESIZE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"01      34          CALLVALUE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"02      90          SWAP1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"03      11          GT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"04      6008        PUSH1 08"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"06      57          JUMPI"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"07      FD          REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"08      5B          JUMPDEST"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"09      36          CALLDATASIZE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0A      610003      PUSH2 0003"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0D      90          SWAP1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0E      06          MOD"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0F      15          ISZERO"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"10      34          CALLVALUE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"11      600A        PUSH1 0A"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"13      01          ADD"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"14      57          JUMPI"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"15      FD          REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"16      FD          REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"17      FD          REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"18      FD          REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"19      5B          JUMPDEST"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"1A      00          STOP"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"? Enter the value to send:"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"? Enter the calldata:"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["See ",(0,n.jsx)(s.a,{href:"/posts/2022/2/24/learning-ethereum-virtual-machine-opcodes-with-evm-puzzles",children:"Puzzle #8 of the previous version"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,n.jsxs)(s.p,{children:["Most of the changes in this version are user experience improvements, only Puzzle #7 and #8 are fresh additions. But they were great ones at that! With the introduction of the ",(0,n.jsx)(s.code,{children:"CREATE"})," and ",(0,n.jsx)(s.code,{children:"CALL"})," opcodes they force you to become familiar with the concept of construction and runtime bytecode which is important to understand even when developing with a high-level language such as Solidity."]}),"\n",(0,n.jsx)(s.hr,{}),"\n","\n",(0,n.jsxs)(t.oy,{children:[(0,n.jsx)(t.Zb,{icon:(0,n.jsx)(r.aA,{}),title:"← Learning Ethereum Virtual Machine Opcodes With EVM Puzzles",href:"/posts/2022/2/24/learning-ethereum-virtual-machine-opcodes-with-evm-puzzles/"}),(0,n.jsx)(t.Zb,{icon:(0,n.jsx)(r.aA,{}),title:"More EVM Puzzles - Part 1 →",href:"/posts/2022/5/24/more-evm-puzzles-part-1/"})]})]})}s.default=(0,a.j)({MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,i.a)(),e.components);return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(_createMdxContent,{...e})}):_createMdxContent(e)},pageOpts:{filePath:"pages/posts/2022/3/12/evm-puzzles-second-wind.mdx",route:"/posts/2022/3/12/evm-puzzles-second-wind",timestamp:1702204664e3,title:"EVM Puzzles – Second Wind",headings:c},pageNextRoute:"/posts/2022/3/12/evm-puzzles-second-wind"})}},function(e){e.O(0,[3220,1589,9774,2888,179],function(){return e(e.s=67609)}),_N_E=e.O()}]);