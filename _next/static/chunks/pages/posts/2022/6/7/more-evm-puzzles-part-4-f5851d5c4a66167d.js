(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2435],{43943:function(e,s,l){(window.__NEXT_P=window.__NEXT_P||[]).push(["/posts/2022/6/7/more-evm-puzzles-part-4",function(){return l(53440)}])},53440:function(e,s,l){"use strict";l.r(s),l.d(s,{__toc:function(){return c}});var n=l(35250),a=l(47147),t=l(77298),i=l(18363),r=l(13423);let c=[{depth:2,value:"Puzzle #8",id:"puzzle-8"},{depth:2,value:"Puzzle #9",id:"puzzle-9"},{depth:2,value:"Puzzle #10",id:"puzzle-10"}];function _createMdxContent(e){let s=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code",span:"span",hr:"hr"},(0,t.a)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{children:"More EVM Puzzles - Part 4"}),"\n",(0,n.jsxs)("p",{className:"text-xs text-right",children:["June 7, 2022 by ",(0,n.jsx)(s.a,{href:"/about#patrickd",children:"patrickd"})]}),"\n",(0,n.jsxs)(s.p,{children:["This concludes the series on ",(0,n.jsx)(s.a,{href:"https://twitter.com/DaltonSweeney9",children:"Dalton Sweeney"}),"'s ",(0,n.jsx)(s.a,{href:"https://github.com/daltyboy11/more-evm-puzzles",children:'"10 more EVM puzzles"'})," collection. If you're looking for the start, take a look at ",(0,n.jsx)(s.a,{href:"/posts/2022/5/24/more-evm-puzzles-part-1",children:"Part 1"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"puzzle-8",children:"Puzzle #8"}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"00      34        CALLVALUE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"01      15        ISZERO"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"02      19        NOT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"03      6007      PUSH1 07"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"05      57        JUMPI"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"06      FD        REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"07      5B        JUMPDEST"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"08      36        CALLDATASIZE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"09      6000      PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0B      6000      PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0D      37        CALLDATACOPY"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0E      36        CALLDATASIZE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0F      6000      PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"11      6000      PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"13      F0        CREATE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"14      47        SELFBALANCE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"15      6000      PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"17      6000      PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"19      6000      PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"1B      6000      PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"1D      47        SELFBALANCE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"1E      86        DUP7"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"1F      5A        GAS"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"20      F1        CALL"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"21      6001      PUSH1 01"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"23      14        EQ"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"24      6028      PUSH1 28"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"26      57        JUMPI"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"27      FD        REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"28      5B        JUMPDEST"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"29      47        SELFBALANCE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"2A      14        EQ"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"2B      602F      PUSH1 2F"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"2D      57        JUMPI"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"2E      FD        REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"2F      5B        JUMPDEST"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"30      00        STOP"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"? Enter the calldata: 0x"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Puzzle solved!"})})]})}),"\n",(0,n.jsx)(s.p,{children:"Yes, that's right, I solved it immediately without reading by simply pressing enter on accident. What the heck just happened here?"}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"00      34        CALLVALUE        [0]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"01      15        ISZERO           [1]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"02      19        NOT              [0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"03      6007      PUSH1 07         [0x07, 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"05      57        JUMPI            []"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"06      FD        REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"07      5B        JUMPDEST         []"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["Right at the start it checks whether the call value sent is zero, which is strange since we were never given a chance to specify it.. Anyway, the result of this check is then inverted with ",(0,n.jsx)(s.code,{children:"NOT"}),". Note that inverting a number 1 of type uint256 flips all of its bits, that means it doesn't turn into 0 but into the biggest number possible minus one. Since ",(0,n.jsx)(s.code,{children:"JUMPI"})," jumps for any value different from 0, it would've jumped no matter which value we'd have sent since any non-zero value would have resulted in ",(0,n.jsx)(s.code,{children:"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"})," after the inversion. So it seems we can just completely ignore this part..."]}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"08      36        CALLDATASIZE     [0]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"09      6000      PUSH1 00         [0, 0]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0B      6000      PUSH1 00         [0, 0, 0] (destOffset, offset, size)"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0D      37        CALLDATACOPY     []"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0E      36        CALLDATASIZE     [0]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0F      6000      PUSH1 00         [0, 0]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"11      6000      PUSH1 00         [0, 0, 0] (value, offset, size)"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"13      F0        CREATE           [ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"14      47        SELFBALANCE      [0, ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"15      6000      PUSH1 00         [0, 0, ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"17      6000      PUSH1 00         [0, 0, 0, ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"19      6000      PUSH1 00         [0, 0, 0, 0, ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"1B      6000      PUSH1 00         [0, 0, 0, 0, 0, ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"1D      47        SELFBALANCE      [0, 0, 0, 0, 0, 0, ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"1E      86        DUP7             [ADDRESS, 0, 0, 0, 0, 0, 0, ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"1F      5A        GAS              [GAS, ADDRESS, 0, 0, 0, 0, 0, 0, ADDRESS] (gas, address, value, argsOffset, argsSize, retOffset, retSize)"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"20      F1        CALL             [SUCCESS, 0, ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"21      6001      PUSH1 01         [1, SUCCESS, 0, ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"23      14        EQ               [1, 0, ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"24      6028      PUSH1 28         [0x28, 1, 0, ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"26      57        JUMPI            [0, ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"27      FD        REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"28      5B        JUMPDEST         [0, ADDRESS]"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["We sent no calldata but it'll still attempt copying it to memory here. Then it'll deploy that empty calldata as initialization bytecode which doesn't return anything, so basically we're successfully deploying an empty contract. This contract is then immediately called. The puzzle obtains its own account balance using the ",(0,n.jsx)(s.code,{children:"SELFBALANCE"})," opcode which is used for the first time here, and it would send all of this balance during the call if it had any. As things stand, this is a call made against an address that contains empty bytecode and the call succeeds. You shouldn't be surprised by that, after all we already know that we don't have to write ",(0,n.jsx)(s.code,{children:"STOP"})," at the end of a contract. So an empty contract is just like a contract that has a single ",(0,n.jsx)(s.code,{children:"STOP"})," instruction."]}),"\n",(0,n.jsxs)(s.p,{children:["Furthermore, we can even send invalid calldata that'll result in the ",(0,n.jsx)(s.code,{children:"CREATE"})," opcode to fail and return the zero-address. Calls made to the zero-address will also succeed without reverting since it too has empty bytecode, like any uninitialized address. It's actually harder to fail this puzzle than to win it since we'd have to make the call fail by deploying runtime bytecode that'll revert."]}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"29      47        SELFBALANCE      [0, 0, ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"2A      14        EQ               [1, ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"2B      602F      PUSH1 2F         [0x2F, 1, ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"2D      57        JUMPI            [ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"2E      FD        REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"2F      5B        JUMPDEST         [ADDRESS]"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"30      00        STOP             [ADDRESS]"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["Finally, it checks whether the ",(0,n.jsx)(s.code,{children:"SELFBALANCE"})," after the successful call is the same as the balance was before the call."]}),"\n",(0,n.jsxs)(s.p,{children:["So what was actually supposed to happen here? I think the first part was supposed to ensure that value must have been sent to the puzzle. Then all of this value would have been sent to the contract created using the specified calldata. This contract would have needed to send all of this value back to the puzzle contract to pass the final check. But it wouldn't have been able to do that via the ",(0,n.jsx)(s.code,{children:"CALL"})," opcode since that would execute the puzzle code again which would send it away to another contract it created. Instead, the contract we created via calldata would've had to use the ",(0,n.jsx)(s.code,{children:"SELFDESTRUCT"})," opcode to inject the value back into the puzzle during the call."]}),"\n",(0,n.jsxs)(s.p,{children:["The key takeaway here is that although uint256 are used as booleans by the EVM (0 is false, non-0 is true) doesn't mean that inverting it via ",(0,n.jsx)(s.code,{children:"NOT"})," opcode will result in flipping the boolean, rather than that it'll flip every single byte in the uint256, and that is something that can be easily missed!"]}),"\n",(0,n.jsx)(s.h2,{id:"puzzle-9",children:"Puzzle #9"}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"00      34        CALLVALUE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"01      6000      PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"03      52        MSTORE"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"04      6020      PUSH1 20"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"06      6000      PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"08      20        SHA3"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"09      60F8      PUSH1 F8"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0B      1C        SHR"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0C      60A8      PUSH1 A8"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0E      14        EQ"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0F      6016      PUSH1 16"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"11      57        JUMPI"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"12      FD        REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"13      FD        REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"14      FD        REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"15      FD        REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"16      5B        JUMPDEST"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"17      00        STOP"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"? Enter the value to send:"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["Right away, we're storing the ",(0,n.jsx)(s.code,{children:"CALLVALUE"})," we send to offset ",(0,n.jsx)(s.code,{children:"0x0"})," in memory. Then 2 new opcodes are introduced:"]}),"\n",(0,n.jsxs)(s.p,{children:["You've probably heard about ",(0,n.jsx)(s.code,{children:"SHA3"}),' before. It\'s a one-way hashing algorithm, the EVM makes this algorithm available to us via this instruction and passes it the data to hash via memory. Two items will be consumed from stack: The "offset" specifying where it should begin hashing the data and the "size" telling it when to stop. The resulting 256 bit long hash will be pushed as a new item onto the stack. Here, we\'ll always be hashing the first memory slot, which are the first 32 bytes (',(0,n.jsx)(s.code,{children:"0x20"}),")."]}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"SHR"})," opcode stands for SHift Right, and that's exactly what it does on the bit level. It too consumes two items from the stack: The number of times to shift right and the value that should be shifted. For example, if the first item would be a 2 and the second a 17 (",(0,n.jsx)(s.code,{children:"00010001"}),"), the result would be 4 (",(0,n.jsx)(s.code,{children:"00000100"}),"). In case of this puzzle, we're always shifting 248 (",(0,n.jsx)(s.code,{children:"0xF8"}),") times and the value being shifted is the SHA-3 hash that was calculated just before."]}),"\n",(0,n.jsxs)(s.p,{children:["In case of the stack, we're shifting a value with 256 bits though: ",(0,n.jsx)(s.code,{children:"256 - 248"})," is 8, and that means that everything except the first byte (most-left, or highest order) of the hash is shifted into nothingness. Finally the usual comparison and jump: Only if this byte is equal to ",(0,n.jsx)(s.code,{children:"0xA8"})," the puzzle is solved!"]}),"\n",(0,n.jsxs)(s.p,{children:["In summary: We need to find an integer value to send whose hash starts with ",(0,n.jsx)(s.code,{children:"0xA8"}),"."]}),"\n",(0,n.jsx)(s.p,{children:"Since hashing algorithms are one-way functions, there's no way to say which values will produce it without guessing. Luckily it's only about the first byte, and that should be pretty easy to stumble upon even when just continuously increasing the value by one."}),"\n",(0,n.jsx)(s.p,{children:"So what's the laziest way to do this? A shellscript! Don't judge me, it works and it only took me a couple minutes:"}),"\n",(0,n.jsx)(s.pre,{"data-language":"bash","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"bash","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-token-comment)"},children:"#!/bin/bash"})}),"\n",(0,n.jsxs)(s.span,{className:"line",children:[(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"COUNTER"}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:"1"})]}),"\n",(0,n.jsxs)(s.span,{className:"line",children:[(0,n.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:"rm"}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-token-string)"},children:"solutions/solution_9.json"})]}),"\n",(0,n.jsxs)(s.span,{className:"line",children:[(0,n.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"while"}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" [ $? "}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"=="}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-token-constant)"},children:"1"}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" ]"})]}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"do"})}),"\n",(0,n.jsxs)(s.span,{className:"line",children:[(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"     "}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:"printf"}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-token-string-expression)"},children:'"$COUNTER\\nn\\n"'}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"|"}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:"npx"}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-token-string)"},children:"hardhat"}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-token-string)"},children:"play"})]}),"\n",(0,n.jsxs)(s.span,{className:"line",children:[(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"     COUNTER"}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"$"}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-token-string)"},children:"["}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"$COUNTER "}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:"+1]"})]}),"\n",(0,n.jsxs)(s.span,{className:"line",children:[(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"     "}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-token-function)"},children:"rm"}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,n.jsx)(s.span,{style:{color:"var(--shiki-token-string)"},children:"solutions/solution_9.json"})]}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"done"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["Granted, it's not performant what so ever, but I didn't expect it to be a high number anyway, and it wasn't. It was 47, which is ",(0,n.jsx)(s.code,{children:"0xa813484aef6fb598f9f753daf162068ff39ccea4075cb95e1a30f86995b5b7ee"})," and ",(0,n.jsx)(s.code,{children:"0x00000000000000000000000000000000000000000000000000000000000000a8"})," after being shifted right."]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"? Enter the value to send: 47"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Puzzle solved!"})})]})}),"\n",(0,n.jsx)(s.h2,{id:"puzzle-10",children:"Puzzle #10"}),"\n",(0,n.jsx)(s.pre,{"data-language":"plaintext","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"plaintext","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"00      6020                                                                    PUSH1 20"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"02      6000                                                                    PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"04      6000                                                                    PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"06      37                                                                      CALLDATACOPY"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"07      6000                                                                    PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"09      51                                                                      MLOAD"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0A      7FF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0      PUSH32 F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"2B      16                                                                      AND"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"2C      6020                                                                    PUSH1 20"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"2E      6020                                                                    PUSH1 20"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"30      6000                                                                    PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"32      37                                                                      CALLDATACOPY"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"33      6000                                                                    PUSH1 00"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"35      51                                                                      MLOAD"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"36      17                                                                      OR"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"37      7FABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABAB      PUSH32 ABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABAB"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"58      14                                                                      EQ"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"59      605D                                                                    PUSH1 5D"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"5B      57                                                                      JUMPI"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"5C      FD                                                                      REVERT"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"5D      5B                                                                      JUMPDEST"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"5E      00                                                                      STOP"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"? Enter the calldata:"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["Right at the beginning, the first 32 bytes (",(0,n.jsx)(s.code,{children:"0x20"}),") from calldata are copied to the first memory slot, where it's immediately read from again using ",(0,n.jsx)(s.code,{children:"MLOAD"}),". Afterwards, a bitwise ",(0,n.jsx)(s.code,{children:"AND"})," is applied to it with ",(0,n.jsx)(s.code,{children:"0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0"}),'. This means that only the upper 4 bits of each byte from the first 32 bytes we sent as calldata are still there. The lower 4 bits have been "masked" out and the result is left on the top of the stack.']}),"\n",(0,n.jsxs)(s.p,{children:["The next 32 bytes from calldata are now copied to memory overwriting the first ones. This word of bytes is again loaded onto stack like before with ",(0,n.jsx)(s.code,{children:"MLOAD"})," and then ",(0,n.jsx)(s.code,{children:"OR"}),"ed with the result of the ",(0,n.jsx)(s.code,{children:"AND"})," operation. The ",(0,n.jsx)(s.code,{children:"JUMPI"})," condition to solve the puzzle is that the result of these operations ends up being equal to ",(0,n.jsx)(s.code,{children:"0xABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABAB"}),"."]}),"\n",(0,n.jsx)(s.p,{children:'If we call the first word from calldata A and the second word B, the following is the "formula" we have to solve here:'}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsx)(s.code,{"data-language":"text","data-theme":"default",children:(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"(A & 0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0) | B = 0xABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABAB"})})})}),"\n",(0,n.jsxs)(s.p,{children:["If we send zeros for A the result of the ",(0,n.jsx)(s.code,{children:"AND"})," operation will be a zero-word too. That way we can discard A completely and just send the end result as B:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsx)(s.code,{"data-language":"text","data-theme":"default",children:(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0x0000000000000000000000000000000000000000000000000000000000000000 | B = 0xABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABAB"})})})}),"\n",(0,n.jsx)(s.p,{children:"Putting the words together as a single calldata, this is indeed a solution:"}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"? Enter the calldata: 0x0000000000000000000000000000000000000000000000000000000000000000ABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABAB"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Puzzle solved!"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["But bit-masking is an interesting thing to understand: If we had sent ",(0,n.jsx)(s.code,{children:"0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"})," as A, it would've ended up as ",(0,n.jsx)(s.code,{children:"0xA0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0"})," after the ",(0,n.jsx)(s.code,{children:"AND"})," operation masked out the lower bits. Then we could've sent ",(0,n.jsx)(s.code,{children:"0x0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B"})," as B which, ",(0,n.jsx)(s.code,{children:"OR"}),"ed with A, would've produced the desired result too:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"? Enter the calldata: 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Puzzle solved!"})})]})}),"\n",(0,n.jsx)(s.hr,{}),"\n","\n",(0,n.jsx)(i.oy,{children:(0,n.jsx)(i.Zb,{icon:(0,n.jsx)(r.aA,{}),title:"← More EVM Puzzles - Part 3",href:"/posts/2022/6/6/more-evm-puzzles-part-3/"})})]})}s.default=(0,a.j)({MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,t.a)(),e.components);return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(_createMdxContent,{...e})}):_createMdxContent(e)},pageOpts:{filePath:"pages/posts/2022/6/7/more-evm-puzzles-part-4.mdx",route:"/posts/2022/6/7/more-evm-puzzles-part-4",timestamp:1702204664e3,title:"More EVM Puzzles - Part 4",headings:c},pageNextRoute:"/posts/2022/6/7/more-evm-puzzles-part-4"})}},function(e){e.O(0,[3220,1589,9774,2888,179],function(){return e(e.s=43943)}),_N_E=e.O()}]);